{"version":3,"sources":["assets/images/logo/logo.png","components/LaunchList.js","components/Launches.js","components/GeneralInfo.js","components/RocketInfo.js","components/LaunchpadInfo.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","props","launchData","id","name","success","flight_number","date_utc","links","className","src","patch","small","alt","dateFormat","href","webcast","target","rel","article","wikipedia","to","GQL_LAUNCHES","gql","Launches","useQuery","loading","error","data","role","aria-hidden","console","log","allLaunches","launches","failedLaunches","filter","obj","Fragment","length","type","placeholder","aria-label","map","launch","key","payload","date_unix","window","GQL_ROCKET","variables","rocketId","rocket","active","stages","boosters","cost_per_launch","success_rate_pct","first_flight","country","company","description","flickr_images","class","url","GQL_LAUNCHPAD","launchpadId","launchpad","full_name","locality","region","timezone","latitude","longitude","launch_attempts","launch_successes","details","status","GQL_LAUNCH","match","params","date_local","client","ApolloClient","uri","cache","InMemoryCache","App","logo","exact","path","component","Launch","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5ead9a44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.950ba665.png\";","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Thu Sep 17 2020 16:57:55 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport dateFormat from 'dateformat'\nimport { Link } from 'react-router-dom'\n\nfunction LaunchList(props) {\n    const {\n        id,\n        name,\n        success,\n        flight_number,\n        date_utc,\n        links\n    } = props.launchData\n\n    // Wed Mar 21 2007 06:40:00 GMT+0530 (India Standard Time)\n    // Wed Mar 21 2007 06:40:00\n\n    return (\n        <div className=\"card vertical\">\n            <div className={`card-header ${success ? 'success' : 'failure'}`}>\n                <img className=\"card-img-top\" src={links.patch.small} alt=\"Patch\" />\n                <h5 className=\"card-title\">{name}</h5>\n            </div>\n            <div className=\"card-body\">\n                <h6>Id: <span>{id}</span></h6>\n                <h6>Flight Number: <span>{flight_number}</span></h6>\n                <h6>Date: <span>{dateFormat(date_utc, \"dS mmm, yyyy\")}</span></h6>\n                <h6>Day: <span>{dateFormat(date_utc, \"dddd\")}</span></h6>\n                <h6>Time: <span>{dateFormat(date_utc, \"hh:MM:ss TT\")}</span></h6>\n            </div>\n            <div className=\"card-footer\">\n                <div className=\"btn-row\">\n                    <a href={links.webcast} className=\"btn btn-info\" target=\"_blank\" rel=\"noopener noreferrer\">Webcast</a>\n                    <a href={links.article} className=\"btn btn-warning\" target=\"_blank\" rel=\"noopener noreferrer\">Article</a>\n                    <a href={links.wikipedia} className=\"btn btn-info\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>\n                </div>\n                <Link to={`/launch/${id}`} className=\"btn btn-fluid btn-dark\" rel=\"noopener noreferrer\">More</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(LaunchList)\n","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Thu Sep 17 2020 15:26:33 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport LaunchList from './LaunchList'\n\nconst GQL_LAUNCHES = gql`\n  query LaunchesQuerry {\n    launches {\n        id\n        name\n        success\n        flight_number\n        date_utc\n        links {\n            patch {\n                small\n            }\n            webcast\n            article\n            wikipedia\n        }\n    }\n  }\n`\n\nfunction Launches() {\n    const { loading, error, data } = useQuery(GQL_LAUNCHES)\n\n    if (loading) {\n        return (\n            <div className=\"d-flex align-items-center\">\n                <h4 className=\"loading\">Loading...</h4>\n                <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error)\n        return (<h2>⚠️ Error Fetching Data</h2>)\n    }\n\n    const allLaunches = data.launches\n    const failedLaunches = data.launches.filter((obj) => !obj.success)\n\n    return (\n        <React.Fragment>\n            <div className=\"launches\">\n                <div className=\"launch-header\">\n                    <h2 className=\"title success\">\n                    🚀 All Launches ({allLaunches.length})\n                    </h2>\n                    <div className=\"input-group\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search All Launches\" aria-label=\"Search All Launches\" />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-success\" type=\"button\">search</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"launch-list-wrapper success\">\n                    {\n                        allLaunches.map((launch) => (\n                            <LaunchList key={launch.id} launchData={launch} />\n                        ))\n                    }\n                </div>\n            </div>\n            <div className=\"launches\">\n                <div className=\"launch-header\">\n                    <h2 className=\"title failed\">\n                    ⚠️ Failed Launches ({failedLaunches.length})\n                    </h2>\n                    <div className=\"input-group\">\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Search Failed Launches\" aria-label=\"Search Failed Launches\" />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-success\" type=\"button\">search</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"launch-list-wrapper failures\">\n                    {\n                        failedLaunches.map((launch) => (\n                            <LaunchList key={launch.id} launchData={launch} />\n                        ))\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Launches\n","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Fri Sep 18 2020 15:52:03 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport dateFormat from 'dateformat'\n\nfunction GeneralInfo(props) {\n    const {\n        name, success,\n        date_utc, flight_number,\n        date_unix, window, links\n    } = props.payload\n\n    return (\n        <div className=\"card horizontal\">\n            <div className=\"card-header horizontal\">\n                General Info\n            </div>\n            <div className=\"card-body horizontal\">\n                <div className=\"left\">\n                    <h5 className=\"card-title\">{name}</h5>\n                    <p className=\"card-text\"><span>Flight number:</span> {flight_number}</p>\n                    <p className=\"card-text\"><span>Successful:</span> {success ? 'Yes' : 'No'}</p>\n                    <p className=\"card-text\"><span>Date (UTC):</span> {dateFormat(date_utc, \"dddd, mmmm dS, yyyy, hh:MM:ss TT\")}</p>\n                    <p className=\"card-text\"><span>Date (UNIX):</span> {date_unix}</p>\n                    <p className=\"card-text\"><span>Windows:</span> {window}</p>\n                    <div className=\"btn-row horizontal\">\n                        <a href={links.webcast} className=\"btn btn-webcast hvr-icon-pulse-grow\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <i className=\"fab fa-youtube hvr-icon\"></i>Webcast\n                        </a>\n                        <a href={links.article} className=\"btn btn-article hvr-icon-pulse-grow\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <i className=\"far fa-newspaper hvr-icon\"></i>Article\n                            </a>\n                        <a href={links.wikipedia} className=\"btn btn-wikipedia hvr-icon-pulse-grow\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <i className=\"fab fa-wikipedia-w hvr-icon\"></i>Wikipedia\n                        </a>\n                    </div>\n                </div>\n                <div className=\"right\">\n                    <img src={links.patch.small} alt=\"Patch\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(GeneralInfo)\n","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Fri Sep 18 2020 15:51:53 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nconst GQL_ROCKET = gql`\nquery RocketQuerry($id: String!) {\n    rocket(id: $id) {\n        name\n        type\n        active\n        stages\n        boosters\n        cost_per_launch\n        success_rate_pct\n        first_flight\n        country\n        company\n        wikipedia\n        description\n        flickr_images\n        height {\n            meters\n            feet\n        }\n        diameter {\n            meters\n            feet\n        }\n        mass {\n            kg\n            lb\n        }\n        landing_legs {\n            number\n            material\n        }\n        payload_weights {\n            id\n            name\n            kg\n            lb\n        }\n        engines {\n            number\n            type\n            version\n            layout\n            engine_loss_max\n            propellant_1\n            propellant_2\n            thrust_to_weight\n            isp {\n                sea_level\n                vacuum\n            }\n            thrust_sea_level {\n                kN\n                lbf\n            }\n            thrust_vacuum {\n                kN\n                lbf\n            }\n        }\n    }\n}\n`\n\nfunction RocketInfo(props) {\n    const { loading, error, data } = useQuery(GQL_ROCKET, { variables: { id: props.rocketId } })\n\n    if (loading) {\n        return (\n            <div className=\"d-flex align-items-center\">\n                <h4 className=\"loading\">Loading Rocket Data...</h4>\n                <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error)\n        return (<h2><span>⚠️</span> Error Fetching Rocket Data</h2>)\n    }\n\n    console.log(data)\n\n    const {\n        name, type, active, stages, boosters, cost_per_launch,\n        success_rate_pct, first_flight, country, company,\n        wikipedia, description, flickr_images\n    } = data.rocket\n\n    return (\n        <div className=\"card horizontal\">\n            <div className=\"card-header horizontal\">\n                Rocket Info\n            </div>\n            <div className=\"card-body horizontal\">\n                <div className=\"left\">\n                    <h5 className=\"card-title rocket-info\">{name}</h5>\n                    <p className=\"rocket-desc\">{description}</p>\n                    <table class=\"table\">\n                        <tbody>\n                            <tr>\n                                <td>Type</td>\n                                <td>{type}</td>\n                            </tr>\n                            <tr>\n                                <td>Active</td>\n                                <td>{active ? 'Yes' : 'No'}</td>\n                            </tr>\n                            <tr>\n                                <td>Stages</td>\n                                <td>{stages}</td>\n                            </tr>\n                            <tr>\n                                <td>Boosters</td>\n                                <td>{boosters}</td>\n                            </tr>\n                            <tr>\n                                <td>Cost per launch</td>\n                                <td>{cost_per_launch}</td>\n                            </tr>\n                            <tr>\n                                <td>Success Rate (%)</td>\n                                <td>{success_rate_pct}</td>\n                            </tr>\n                            <tr>\n                                <td>First flight</td>\n                                <td>{first_flight}</td>\n                            </tr>\n                            <tr>\n                                <td>Country</td>\n                                <td>{country}</td>\n                            </tr>\n                            <tr>\n                                <td>Company</td>\n                                <td>{company}</td>\n                            </tr>\n                            <tr>\n                                <td>First flight</td>\n                                <td>{first_flight}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                    {/* <div className=\"prop-wrapper\">\n                        <div className=\"title\">\n                            Landing legs\n                        </div>\n                        <div className=\"body\">\n                            <span className=\"card-text\">Number: {landing_legs.number}</span>\n                            <span className=\"card-text\">Material: {landing_legs.material}</span>\n                        </div>\n                    </div> */}\n\n                    {/* <div className=\"prop-wrapper\">\n                        <div className=\"title\">\n                            Payload Weights\n                        </div>\n                        <div className=\"body\">\n                            <span className=\"card-text\">id: {payload_weights.id}</span>\n                            <span className=\"card-text\">name: {payload_weights.name}</span>\n                            <span className=\"card-text\">kg: {payload_weights.kg}</span>\n                            <span className=\"card-text\">lb: {payload_weights.lb}</span>\n                        </div>\n                    </div> */}\n\n                    {/* <div className=\"engine-wrapper\">\n                        <p className=\"card-text\">Engines</p>\n                        <p className=\"card-text\">number: {engines.number}</p>\n                        <p className=\"card-text\">name: {engines.name}</p>\n                        <p className=\"card-text\">type: {engines.type}</p>\n                        <p className=\"card-text\">version: {engines.version}</p>\n                        <p className=\"card-text\">layout: {engines.layout}</p>\n                        <p className=\"card-text\">engine_loss_max: {engines.engine_loss_max}</p>\n                        <p className=\"card-text\">propellant_1: {engines.propellant_1}</p>\n                        <p className=\"card-text\">propellant_2: {engines.propellant_2}</p>\n                        <p className=\"card-text\">thrust_to_weight: {engines.thrust_to_weight}</p>\n\n                        <p className=\"card-text\">thrust sea level:\n                            {engines.thrust_sea_level.kN} kN\n                            {engines.thrust_sea_level.lbf} lbf\n                        </p>\n\n                        <p className=\"card-text\">thrust vacuum:\n                            {engines.thrust_vacuum.kN} kN\n                            {engines.thrust_vacuum.lbf} lbf\n                        </p>\n\n                        <p className=\"card-text\">isp:\n                            sea level: {engines.sea_level.kN}\n                            vacuum: {engines.vacuum.lbf}\n                        </p>\n                    </div> */}\n\n                    <a href={wikipedia} className=\"btn btn-wikipedia\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-wikipedia-w\"></i>Wikipedia\n                    </a>\n                </div>\n                <div className=\"right rocket-img-wrapper\">\n                    {\n                        flickr_images.map((url) =>\n                            <img src={url} alt=\"Rocket\" />\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(RocketInfo)\n","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Fri Sep 18 2020 15:52:19 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nconst GQL_LAUNCHPAD = gql`\nquery RocketQuerry($id: String!) {\n    launchpad(id: $id) {\n        name,\n        full_name\n        locality\n        region\n        timezone\n        latitude\n        longitude\n        launch_attempts\n        launch_successes\n        rockets\n        launches\n        details\n        status\n    }\n}\n`\n\nfunction LaunchpadInfo(props) {\n    const { loading, error, data } = useQuery(GQL_LAUNCHPAD, { variables: { id: props.launchpadId } })\n\n    if (loading) {\n        return (\n            <div className=\"d-flex align-items-center\">\n                <h4 className=\"loading\">Loading Launchpad Data...</h4>\n                <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error)\n        return (<h2>⚠️ Error Fetching Launchpad Data</h2>)\n    }\n\n    const {\n        name,\n        full_name,\n        locality,\n        region,\n        timezone,\n        latitude,\n        longitude,\n        launch_attempts,\n        launch_successes,\n        details,\n        status\n    } = data.launchpad\n\n    return (\n        <div className=\"card horizontal\">\n            <div className=\"card-header horizontal\">\n                Launchpad Info\n            </div>\n            <div className=\"card-body horizontal\">\n                <div className=\"left\">\n                    <h5 className=\"card-title launchpad-info\">{name}</h5>\n                    <p className=\"launchpad-desc\">{details}</p>\n                    <p className=\"card-text\"><span>Full name:</span> {full_name}</p>\n                    <p className=\"card-text\"><span>Status:</span> {status}</p>\n                    <p className=\"card-text\"><span>Locality:</span> {locality}</p>\n                    <p className=\"card-text\"><span>Region:</span> {region}</p>\n                    <p className=\"card-text\"><span>Timezone:</span> {timezone}</p>\n                    <p className=\"card-text\"><span>Latitude:</span> {latitude}</p>\n                    <p className=\"card-text\"><span>Longitude:</span> {longitude}</p>\n                    <p className=\"card-text\"><span>Launch attempts:</span> {launch_attempts}</p>\n                    <p className=\"card-text\"><span>Launch successes:</span> {launch_successes}</p>\n                    {/* <p className=\"card-text\">Rockets: {rockets}</p>\n                    <p className=\"card-text\">Launches: {launches}</p> */}\n                </div>\n                <div className=\"right\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(LaunchpadInfo)\n","/*\nAuthor: chankruze (chankruze@geekofia.in)\nCreated: Fri Sep 18 2020 11:51:22 GMT+0530 (India Standard Time)\n\nCopyright (c) Geekofia 2020 and beyond\n*/\n\nimport React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport GeneralInfo from './GeneralInfo'\nimport RocketInfo from './RocketInfo'\nimport LaunchpadInfo from './LaunchpadInfo'\nimport { Link } from 'react-router-dom'\n\nconst GQL_LAUNCH = gql`\nquery LaunchQuerry($id: String!) {\n    launch(id: $id) {\n        flight_number\n        name\n        success\n        static_fire_date_utc\n        static_fire_date_unix\n        date_utc\n        date_local\n        date_unix\n        launchpad\n        details\n        rocket\n        upcoming\n        crew\n        ships\n        capsules\n        payloads\n        window\n        failures {\n            time\n            altitude\n            reason\n        }\n        links {\n            patch {\n                small\n                large\n            }\n            reddit {\n                campaign\n                launch\n                media\n                recovery\n            }\n            flickr {\n                small\n                original\n            }\n            webcast\n            article\n            wikipedia\n        }\n        cores {\n            core\n            flight\n            gridfins\n            legs\n            reused\n            landing_attempt\n            landing_success\n            landing_type\n            landpad\n        }\n    }  \n}\n`\nfunction Launch(props) {\n    const { id } = props.match.params\n    const { loading, error, data } = useQuery(GQL_LAUNCH, { variables: { id } })\n\n    if (loading) {\n        return (\n            <div className=\"d-flex align-items-center\">\n                <h4 className=\"loading\">Loading Launch Data...</h4>\n                <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n            </div>\n        )\n    }\n\n    if (error) {\n        console.log(error)\n        return (<h2><span>⚠️</span> Error Fetching Data</h2>)\n    }\n\n    const {\n        flight_number,\n        name,\n        success,\n        date_utc,\n        date_local,\n        date_unix,\n        launchpad,\n        details,\n        rocket,\n        window,\n        links\n    } = data.launch\n\n    return (\n        <div className=\"launch-wrapper\">\n            {/* General Info Card */}\n            <GeneralInfo payload={{\n                name, success, flight_number, date_utc, date_local,\n                date_unix, window, links, details\n            }} />\n\n            {/* Rocket Info Card */}\n            <RocketInfo rocketId={rocket} />\n\n            {/* Launchpad Info Card */}\n            <LaunchpadInfo launchpadId={launchpad} />\n\n            {/* Back */}\n            <Link to=\"/\" className=\"btn btn-dark btn-back\">\n                <i className=\"fas fa-home\"></i> Home\n            </Link>\n        </div>\n    )\n}\n\nexport default React.memo(Launch)\n","import React from 'react';\nimport './App.css';\nimport logo from './assets/images/logo/logo.png'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\nimport { BrowserRouter, Route } from \"react-router-dom\"\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nconst client = new ApolloClient({\n  uri: `/`,\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"container\">\n          <img className=\"App-logo\" src={logo} alt=\"SpaceX\" />\n          {/* Home */}\n          <Route exact path=\"/\" component={Launches} />\n          {/* Launch */}\n          <Route exact path=\"/launch/:id\" component={Launch} />\n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}